{{>licenseInfo}}

{{=< >=}}

var ApiClient = require('../ApiClient');

<#emitJSDoc>/**
 * <baseName> service.
 * @module <#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><classname>
 */

/**
 * Constructs a new <&classname>. <#description>
 * <description></description>
 * @alias module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><apiPackage>/</apiPackage><classname>
 * @class
 * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient} apiClient Optional API client implementation to use,
 * default to {@link module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient#instance} if unspecified.
 */
</emitJSDoc>module.exports = function(apiClient) {
  this.apiClient = apiClient || ApiClient.instance;
<#operations><#operation><#emitJSDoc>
  /**<#summary>
   * <summary></summary><#notes>
   * <notes></notes><#allParams><#required>
   * @param {<&vendorExtensions.x-jsdoc-type>} <paramName> <description></required></allParams><#hasOptionalParams>
   * @param {Object} opts Optional parameters<#allParams><^required>
   * @param {<&vendorExtensions.x-jsdoc-type>} opts.<paramName> <description><#defaultValue> (default to <.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
   * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<vendorExtensions.x-custom-config.methodNameCamel>Callback} callback The callback function, accepting three arguments: error, data, response<#returnType>
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with an object containing data of type {@link <&vendorExtensions.x-jsdoc-type>} and HTTP response</returnType><^returnType>, with an object containing HTTP response</returnType></usePromises>
   */
</emitJSDoc>  this.<vendorExtensions.x-custom-config.methodNameCamel><#usePromises>WithHttpInfo</usePromises> = function(<vendorExtensions.x-codegen-arg-list>) {<#hasOptionalParams>
    opts = opts || {};</hasOptionalParams>
    var postBody = <#bodyParam><#required><paramName></required><^required>opts['<paramName>']</required></bodyParam><^bodyParam>null</bodyParam>;
<#allParams><#required>
    // verify the required parameter '<paramName>' is set
    if (<paramName> === undefined || <paramName> === null) {
      throw new Error("Missing the required parameter '<paramName>' when calling <vendorExtensions.x-custom-config.methodNameCamel>");
    }
</required></allParams>
    var pathParams = {<#pathParams>
      '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></pathParams>
    };
    var queryParams = {<#queryParams>
      '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></queryParams>
    };
    var headerParams = {<#headerParams>
      '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></headerParams>
    };

    var formParams = {<#formParams>
      '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></formParams>
    };

    var authNames = [<#authMethods>'<name>'<#hasMore>, </hasMore></authMethods>];
    var contentTypes = [<#consumes>'<& mediaType>'<#hasMore>, </hasMore></consumes>];
    var accepts = [<#produces>'<& mediaType>'<#hasMore>, </hasMore></produces>];
    var returnType = 'application/json';

    return this.apiClient.callApi(
      '<&path>', '<httpMethod>',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType<^usePromises>, callback</usePromises>
    );
  }
<#usePromises>
  <#emitJSDoc>
  /**<#summary>
   * <summary></summary><#notes>
   * <notes></notes><#allParams><#required>
   * @param {<&vendorExtensions.x-jsdoc-type>} <paramName> <description></required></allParams><#hasOptionalParams>
   * @param {Object} opts Optional parameters<#allParams><^required>
   * @param {<&vendorExtensions.x-jsdoc-type>} opts.<paramName> <description><#defaultValue> (default to <.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
   * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<vendorExtensions.x-custom-config.methodNameCamel>Callback} callback The callback function, accepting three arguments: error, data, response<#returnType>
   * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with data of type {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises>
   */
</emitJSDoc>  this.<vendorExtensions.x-custom-config.methodNameCamel> = function(<vendorExtensions.x-codegen-arg-list>) {
    return this.<vendorExtensions.x-custom-config.methodNameCamel>WithHttpInfo(<vendorExtensions.x-codegen-arg-list>)
      .then(function(response_and_data) {
        return response_and_data.data;
      });
  }
</usePromises>
</operation></operations>};
<={{ }}=>
