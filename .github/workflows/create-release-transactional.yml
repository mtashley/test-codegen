name: ðŸ“¦ Create Transactional SDK Release

on:
  push:
    # paths:
    #   - 'spec/transactional.json'
    #   - 'swagger-config/transactional/**.*'
    #   - '.github/workflows/create-release-transactional.yml'
    branches:
      - disabled

env:
  PUBLISH_INTERNAL: false # whether or not to push to git repos
  PUBLISH_EXTERNAL: false # whether or not to push to package managers

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: NPM Install
        run: npm install
      - name: Validate Transactional Spec
        run: npx @apidevtools/swagger-cli validate spec/transactional.json
      - name: Set Version
        id: set-version
        run: node utils/actions/setVersionVar.js --api=transactional

  setup-cache:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@v2
      - name: Initialize Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir
      - name: Install Codegen CLI
        if: steps.init-cache-md.outputs.cache-hit != 'true'
        run: |
          mkdir .cache
          wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.7/swagger-codegen-cli-2.4.7.jar -O .cache/swagger-codegen-cli.jar
          java -jar .cache/swagger-codegen-cli.jar help

  generate-node:
    runs-on: ubuntu-latest
    needs: [validate, setup-cache]
    steps:
      - uses: actions/checkout@v2

      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@mailchimp'

      - name: Generate â†’ transactional-javascript
        run: |
          npm install
          node utils/actions/updateLangConfig.js --api=transactional --lang=javascript --specVersion=${{ env.SPEC_VERSION }}
          npm run generate:javascript:transactional
          node utils/actions/generateTypes.js --api=transactional
        env:
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Rename transactional-javascript â†’ transactional-node
        working-directory: swagger-out
        run: |
          mv transactional-javascript transactional-node

      - name: Zip build artifact â†’ transactional-node
        working-directory: swagger-out/transactional-node
        run: zip -r mailchimp-transactional-node.zip .

      - name: Upload build artifact â†’ transactional-node
        uses: actions/upload-artifact@v1
        with:
          name: mailchimp-transactional-node.zip
          path: swagger-out/transactional-node/mailchimp-transactional-node.zip

  generate-php:
    runs-on: ubuntu-latest
    needs: [validate, setup-cache]

    steps:
      - uses: actions/checkout@v2
      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Generate â†’ transactional-php
        run: |
          npm install
          node utils/actions/updateLangConfig.js --api=transactional --lang=php --specVersion=${{ env.SPEC_VERSION }}
          npm run generate:php:transactional
        env:
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Zip build artifact â†’ transactional-php
        working-directory: swagger-out/transactional-php
        run: zip -r mailchimp-transactional-php.zip .

      - name: Upload build artifact â†’ transactional-php
        uses: actions/upload-artifact@v1
        with:
          name: mailchimp-transactional-php.zip
          path: swagger-out/transactional-php/mailchimp-transactional-php.zip

  generate-ruby:
    runs-on: ubuntu-latest
    needs: [validate, setup-cache]
    steps:
      - uses: actions/checkout@v2

      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Generate â†’ transactional-ruby
        run: |
          npm install
          node utils/actions/updateLangConfig.js --api=transactional --lang=ruby --specVersion=${{ env.SPEC_VERSION }}
          npm run generate:ruby:transactional
        env:
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Zip build artifact â†’ transactional-ruby
        working-directory: swagger-out/transactional-ruby
        run: zip -r mailchimp-transactional-ruby.zip .

      - name: Upload build artifact â†’ transactional-ruby
        uses: actions/upload-artifact@v1
        with:
          name: mailchimp-transactional-ruby.zip
          path: swagger-out/transactional-ruby/mailchimp-transactional-ruby.zip

  generate-python:
    runs-on: ubuntu-latest
    needs: [validate, setup-cache]
    steps:
      - uses: actions/checkout@v2

      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Generate â†’ transactional-python
        run: |
          npm install
          node utils/actions/updateLangConfig.js --api=transactional --lang=python --specVersion=${{ env.SPEC_VERSION }}
          npm run generate:python:transactional
        env:
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Zip build artifact â†’ transactional-python
        working-directory: swagger-out/transactional-python
        run: zip -r mailchimp-transactional-python.zip .

      - name: Upload build artifact â†’ transactional-python
        uses: actions/upload-artifact@v1
        with:
          name: mailchimp-transactional-python.zip
          path: swagger-out/transactional-python/mailchimp-transactional-python.zip

  create-release:
    runs-on: ubuntu-latest
    needs:
      [validate, generate-node, generate-php, generate-ruby, generate-python]
    steps:
      - name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SPEC_VERSION: ${{ needs.validate.outputs.version }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Mailchimp Transactional v${{ env.SPEC_VERSION }}
          draft: true
          prerelease: false

  publish-node:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org'
          scope: '@mailchimp'

      - name: Prepare Build & Publishing Tools
        run: npm install

      - uses: actions/download-artifact@v1
        with:
          name: mailchimp-transactional-node.zip
          path: zip

      - name: Unzip build artifact
        run: |
          unzip zip/mailchimp-transactional-node.zip -d transactional-node

      - name: Publish â†’ internal â†’ transactional-node
        if: env.PUBLISH_INTERNAL == 'true'
        working-directory: transactional-node
        run: |
          git init
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote add origin https://github:"$GITHUB_TOKEN"@github.com/mailchimp/mailchimp-transactional-node.git
          git add --force .
          git commit -m "Update mailchimp-transactional-node to v${{ env.SPEC_VERSION }}"
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Publish â†’ npm â†’ transactional-node
        if: env.PUBLISH_EXTERNAL == 'true'
        working-directory: transactional-node
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-php:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    steps:
      - uses: actions/checkout@v2
      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - uses: actions/download-artifact@v1
        with:
          name: mailchimp-transactional-php.zip
          path: zip

      - name: Unzip build artifact
        run: |
          unzip zip/mailchimp-transactional-php.zip -d transactional-php

      - name: Publish â†’ internal â†’ transactional-php
        if: env.PUBLISH_INTERNAL == 'true'
        working-directory: transactional-php/MailchimpTransactional
        run: |
          git init
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote add origin https://github:"$GITHUB_TOKEN"@github.com/mailchimp/mailchimp-transactional-php.git
          git add --force .
          git commit -m "Update mailchimp-transactional-php to v${{ env.SPEC_VERSION }}"
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

  publish-ruby:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    steps:
      - uses: actions/checkout@v2
      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Install Ruby 2.6.x
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Prepare Build & Publishing Tools
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${RUBYGEMS_TOKEN}\n" > $HOME/.gem/credentials
        env:
          RUBYGEMS_TOKEN: ${{ secrets.RUBYGEMS_TOKEN }}

      - uses: actions/download-artifact@v1
        with:
          name: mailchimp-transactional-ruby.zip
          path: zip

      - name: Unzip build artifact
        run: |
          unzip zip/mailchimp-transactional-ruby.zip -d transactional-ruby

      - name: Publish â†’ internal â†’ transactional-ruby
        if: env.PUBLISH_INTERNAL == 'true'
        working-directory: transactional-ruby
        run: |
          git init
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote add origin https://github:"$GITHUB_TOKEN"@github.com/mailchimp/mailchimp-transactional-ruby.git
          git add --force .
          git commit -m "Update mailchimp-transactional-ruby to v${{ env.SPEC_VERSION }}"
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      - name: Publish â†’ RubyGems â†’ transactional-ruby
        if: env.PUBLISH_EXTERNAL == 'true'
        run: |
          gem build transactional-ruby/*.gemspec
          gem push transactional-ruby/*.gem -k rubygems

  publish-python:
    runs-on: ubuntu-latest
    needs: [validate, create-release]
    steps:
      - uses: actions/checkout@v2
      - name: Initialize Transactional Cache
        id: init-cache-md
        uses: actions/cache@v1
        with:
          path: .cache
          key: cache-dir

      - name: Install Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - uses: actions/download-artifact@v1
        with:
          name: mailchimp-transactional-python.zip
          path: zip

      - name: Unzip build artifact
        run: |
          unzip zip/mailchimp-transactional-python.zip -d transactional-python

      - name: Prepare Build & Publishing Tools
        working-directory: transactional-python
        run: |
          python -m pip install --user setuptools wheel --no-warn-script-location
          python setup.py bdist_wheel

      - name: Publish â†’ internal â†’ transactional-python
        if: env.PUBLISH_INTERNAL == 'true'
        working-directory: transactional-python
        run: |
          git init
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git remote add origin https://github:"$GITHUB_TOKEN"@github.com/mailchimp/mailchimp-transactional-python.git
          git add --force .
          git commit -m "Update mailchimp-transactional-python to v${{ env.SPEC_VERSION }}"
          git push origin master --force
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SPEC_VERSION: ${{ needs.validate.outputs.version }}

      # Publish Transactional SDKs Externally
      - name: Publish â†’ PyPI â†’ transactional-python (test)
        if: env.PUBLISH_EXTERNAL == 'true'
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TOKEN_TEST }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: transactional-python/dist

      - name: Publish â†’ PyPI â†’ marketing-python (dist)
        if: env.PUBLISH_EXTERNAL == 'true'
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: transactional-python/dist
